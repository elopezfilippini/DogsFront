{"ast":null,"code":"export default function validate(input, Temps) {\n  const cal = Temps;\n  console.log(cal);\n  const contienenumero = /^\\d+$/;\n  const errors = {};\n  if (!input.name) errors.name = \"Debe Ingresar un npmbre\";else if (!Temps || !Array.isArray(Temps) || !Temps.some(temp => temp.name === input.temperament)) {\n    errors.temperament = \"El temperamento ingresado es incorrecto\";\n  } else if (!contienenumero.test(Number(input.maxHeight))) errors.maxHeight = \"La altura debe ser un número.\";else if (!contienenumero.test(input.minHeight)) errors.minHeight = \"La altura debe ser un número.\";else if (!contienenumero.test(input.weightMax)) errors.weightMax = \"El peso debe ser un número.\";else if (!contienenumero.test(input.weightMin)) errors.weightMin = \"El peso debe ser un número.\";else if (!contienenumero.test(input.spanLife)) errors.spanLife = \"La expectativa de Vida debe ser un numero.\";\n  return errors;\n}","map":{"version":3,"names":["validate","input","Temps","cal","console","log","contienenumero","errors","name","Array","isArray","some","temp","temperament","test","Number","maxHeight","minHeight","weightMax","weightMin","spanLife"],"sources":["C:/Users/emi87/OneDrive/Escritorio/Pi Dogs/PI-Dogs-main/client/src/Validation.js"],"sourcesContent":["\r\n\r\nexport default function validate(input,Temps){\r\n\r\nconst cal = Temps\r\n    console.log(cal)\r\nconst contienenumero=  /^\\d+$/\r\n\r\nconst errors = {}\r\n if (!input.name)  errors.name = \"Debe Ingresar un npmbre\"     \r\n else if (!Temps || !Array.isArray(Temps) || !Temps.some(temp => temp.name === input.temperament)) {\r\n    errors.temperament = \"El temperamento ingresado es incorrecto\";\r\n \r\n\r\n\r\n}\r\nelse if  (!contienenumero.test(Number(input.maxHeight)))  errors.maxHeight = \"La altura debe ser un número.\"     \r\nelse if (!contienenumero.test(input.minHeight))  errors.minHeight = \"La altura debe ser un número.\"     \r\nelse if (!contienenumero.test(input.weightMax))  errors.weightMax = \"El peso debe ser un número.\"     \r\nelse if (!contienenumero.test(input.weightMin))  errors.weightMin = \"El peso debe ser un número.\"     \r\nelse if (!contienenumero.test(input.spanLife))  errors.spanLife = \"La expectativa de Vida debe ser un numero.\"     \r\nreturn errors\r\n}   "],"mappings":"AAEA,eAAe,SAASA,QAAQA,CAACC,KAAK,EAACC,KAAK,EAAC;EAE7C,MAAMC,GAAG,GAAGD,KAAK;EACbE,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EACpB,MAAMG,cAAc,GAAG,OAAO;EAE9B,MAAMC,MAAM,GAAG,CAAC,CAAC;EAChB,IAAI,CAACN,KAAK,CAACO,IAAI,EAAGD,MAAM,CAACC,IAAI,GAAG,yBAAyB,MACpD,IAAI,CAACN,KAAK,IAAI,CAACO,KAAK,CAACC,OAAO,CAACR,KAAK,CAAC,IAAI,CAACA,KAAK,CAACS,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,IAAI,KAAKP,KAAK,CAACY,WAAW,CAAC,EAAE;IAC/FN,MAAM,CAACM,WAAW,GAAG,yCAAyC;EAIlE,CAAC,MACI,IAAK,CAACP,cAAc,CAACQ,IAAI,CAACC,MAAM,CAACd,KAAK,CAACe,SAAS,CAAC,CAAC,EAAGT,MAAM,CAACS,SAAS,GAAG,+BAA+B,MACvG,IAAI,CAACV,cAAc,CAACQ,IAAI,CAACb,KAAK,CAACgB,SAAS,CAAC,EAAGV,MAAM,CAACU,SAAS,GAAG,+BAA+B,MAC9F,IAAI,CAACX,cAAc,CAACQ,IAAI,CAACb,KAAK,CAACiB,SAAS,CAAC,EAAGX,MAAM,CAACW,SAAS,GAAG,6BAA6B,MAC5F,IAAI,CAACZ,cAAc,CAACQ,IAAI,CAACb,KAAK,CAACkB,SAAS,CAAC,EAAGZ,MAAM,CAACY,SAAS,GAAG,6BAA6B,MAC5F,IAAI,CAACb,cAAc,CAACQ,IAAI,CAACb,KAAK,CAACmB,QAAQ,CAAC,EAAGb,MAAM,CAACa,QAAQ,GAAG,4CAA4C;EAC9G,OAAOb,MAAM;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}